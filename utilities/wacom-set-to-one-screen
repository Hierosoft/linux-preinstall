#!/usr/bin/env python3
'''
wacom-set-to-one-screen
-----------------------
This script is part of <https://github.com/poikilos/linux-preinstall>
by Jake Gustafson.

This module generates commands necessary to set a Wacom tablet to only
use one screen so that having multiple monitors doesn't cause your
lines to be skewed when drawing.


Usage:
    wacom-set-to-one-screen [port] [options]

Examples:
    wacom-set-to-one-screen
    # ^ list all screens then exit

    wacom-set-to-one-screen HDMI-1
    # ^ align the Wacom tablet with an output called HDMI-1 if it exists and
    #   has a screen connected to it.

Sequential arguments:
screen          Specify the name of a display port such as HDMI-1, but
                it must exist and have a screen connected to it. If you
                do not specify a port, wacom-set-to-one-screen will
                list ports with connected screens similarly to xrandr
                but with simplified output.

Options:
--help          Show this screen then exit.
--verbose       Show more output.
--debug         Show even more output.
'''
# See https://github.com/linuxwacom/xf86-input-wacom/wiki/Dual-and-Multi-Monitor-Set-Up-II
from __future__ import print_function
import sys
import os
import shlex

from find_linuxpreinstall import linuxpreinstall

from linuxpreinstall import (
    echo0,
    echo1,
    echo2,
    which,
    profile,
    run_and_get_lists,
)

me = "wacom-set-to-one-screen"

# TMP_PATH = os.path.join(profile, "tmp")

PRE_MSG = (
    "Using the information above, run the following commands,"
    " but replace {example_device} with your input device listed above,"
    " and replace {output_device} with your output device listed"
    " further up:"
)
POST_MSG = (
    "You only need to run xsetwacom on your wacom inputs"
    " if you have multiple monitors. Doing so will map your digitizing"
    "tablet to that monitor, so that the cursor will move at the same"
    " speed in the x and y direction, given that your tablet's aspect"
    " ratio is the same as your screen's."
)

INSTALL_TIP = '''
Make sure the following are installed as per <https://linuxwacom.github.io/>:
  input-wacom
  xf86-input-wacom
  libwacom

Or on Fedora:
sudo dnf install -y xorg-x11-drv-wacom

If the Tablet's light (if it has one) doesn't come on, you may need to plug the Tablet directly into a USB port rather than into a HUB.
'''

WHY_HEAD_MSG_FMT = '''
Users of the nvidia binary driver must use HEAD-# such as via:
  wacom-set-to-one-screen HEAD-{}
until the Wacom driver supports XRandR 1.2 or later.
See <https://unix.stackexchange.com/a/700836/343286>
'''

def usage():
    echo0()
    echo0()
    echo0(__doc__)


def generate_cmd_parts(input_device, output):
    '''
    Generate an xsetwacom command that will align the tablet to a single
    screen.
    '''
    return ["xsetwacom", "set", input_device, "MapToOutput", output]


def main():
    selected = None
    for argI in range(1, len(sys.argv)):
        arg = sys.argv[argI]
        if arg.startswith("--"):
            if arg in ["--verbose", "--debug"]:
                # Already handled by the module.
                pass
            elif arg in ["--help", "/?"]:
                usage()
                return 0
            else:
                usage()
                echo0("The argument is not valid: {}".format(arg))
                return 2
        elif selected is None:
            selected = arg
        else:
            usage()
            echo0("The argument is not valid: {}".format(arg))
            return 3
    XRANDR = which("xrandr")
    if XRANDR is None:
        echo0("Error: This linux-preinstall utility requires xrandr."
              " You must install the package rst.")
        return 1

    echo1('* using "{}"'.format(XRANDR))
    xrandr_cmd = XRANDR
    xrandr_out, xrandr_err, xrandr_code = run_and_get_lists(xrandr_cmd)
    XSETWACOM = which("xsetwacom")
    if XSETWACOM is None:
        echo0("Error: This linux-preinstall utility requires xsetwacom."
              " You must install the package rst.")
        return 1
    if xrandr_code != 0:
        echo0('Error: "{}" returned code {}'
              ''.format(xrandr_cmd, xrandr_code))
    # print(xrandr_out)
    c_outputs = []  # connected
    d_outputs = []  # disconnected
    p_output = None  # primary
    for rawL in xrandr_out:
        line = rawL.strip()
        d_ender_i = line.find(" disconnected")
        c_ender_i = line.find(" connected")
        p_ender_i = line.find(" connected primary")
        if p_ender_i > -1:
            p_output = line[:p_ender_i]
            c_outputs.append(p_output)
        elif c_ender_i > -1:
            c_outputs.append(line[:c_ender_i])
        elif d_ender_i > -1:
            d_outputs.append(line[:d_ender_i])
    # echo0(xrandr_err)
    echo1('* using "{}"'.format(XSETWACOM))

    cmd_parts = ["xsetwacom", "--list"]
    cmd = shlex.join(cmd_parts)
    list_out, list_err, list_code = run_and_get_lists(cmd_parts)
    echo0()
    example_device = None
    input_devices = []
    if list_code != 0:
        echo0(list_err)
    # else there yet may be 0. See `len(input_devices) < 1` further down
        
    '''
    input_devices = [
        "Wacom Graphire2 4x5 Pen",
        "Wacom Graphire2 4x5 Pen stylus",
        "Wacom Graphire2 4x5 Pen eraser",
        "Wacom Graphire2 4x5 Pen cursor",
    ]
    '''
    known_endings = [
        # Wacom Intuos PT M 2:
        "Pen stylus",
        "Finger touch",
        "Pad pad",
    ]
    for rawL in list_out:
        line = rawL.strip()
        ender = "id:"
        ender_i = line.find(ender)
        if ender_i < 2:
            echo0('Error: "{}" is missing. The format is unrecognized'
                  ' for the line "{}" in the output of `{}`'
                  ''.format(ender, line, cmd))
            return 1
        input_devices.append(line[:ender_i].strip())

    if len(input_devices) < 1:
        if len(list_out) > 0:
            echo0("xsetwacom didn't detect any Wacom input devices"
                  " with any: {}.".format(known_endings))
            echo0("Only got:")
            for rawL in list_out:
                echo0("{}".format(rawL))
        else:
            echo0("xsetwacom didn't detect any Wacom input devices.")
        echo0(INSTALL_TIP)
        return 1
    else:
        example_device = input_devices[0]

    output_device = "HDMI-1"
    if p_output is not None:
        output_device = p_output
    elif len(c_outputs) > 0:
        output_device = c_outputs[0]
    else:
        echo0('Error: xrandr did not list any " connected" monitors.')
        echo0("* {} output line(s)".format(len(xrandr_out)))
        echo0(xrandr_out)
        echo0()
        echo0("* {} errors".format(len(xrandr_err)))
        echo0(xrandr_err)
        echo0()
    if selected is not None:
        for input_device in input_devices:
            cmd_parts = generate_cmd_parts(input_device, selected)
            cmd = shlex.join(cmd_parts)
            print(cmd)
            out, err, code = run_and_get_lists(cmd_parts)
            if err is not None:
                for err_line in err:
                    if "Unable to find an output" in err_line:
                        found_head = False
                        found_no = 0
                        # parts = []
                        # if selected is not None:  # already guaranteed
                        parts = selected.split("-")
                        if len(parts) == 2:
                            try:
                                found_no = int(parts[1])
                            except ValueError:
                                pass
                        for this_err_line in err:
                            if "HEAD" in this_err_line:
                                found_head = True
                            echo0(this_err_line)
                        if not found_head:
                            echo0(WHY_HEAD_MSG_FMT.format(found_no))
                        return 1
            if code == 0:
                echo0("# OK (done)")
            else:
                echo0("# FAILED")
                echo0(out)
                echo0(err)
        return code
    echo0()
    echo0()
    '''
    echo0(PRE_MSG.format(
        example_device=example_device,
        output_device=output_device,
    ))
    '''
    echo0()
    for input_device in input_devices:
        echo0(shlex.join(generate_cmd_parts(input_device, output_device)))
    echo0()
    echo0(POST_MSG)
    if len(d_outputs) > 0:
        echo0("The following outputs are not connected: {}"
              "".format(d_outputs))
    if len(c_outputs) > 0:
        echo0()
        echo0("One of the following can be specified to set the {}"
              " input device(s) above automatically:"
              "".format(len(input_devices)))
        for output in c_outputs:
            print("{} {}".format(me, output))
    else:
        echo0("No outputs were detected in xrandr output,"
              " but if you are sure you know what you are doing, you"
              " can specify a monitor name after {}"
              "".format(me))
    echo0()
    echo0()
    # Other method (choose a display and input device): See tablet-map-to-monitor.txt
    return 0


if __name__ == "__main__":
    sys.exit(main())
