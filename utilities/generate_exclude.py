#!/usr/bin/env python3
'''
generate_exclude
----------------
Author: Jake Gustafson

This script generates a root exclude list suitable for rsync's
--exclude-from option or rsnapshot.conf. It reads:
$USERPROFILE/exclude_from_backup.txt.

This script must run as the user that has that file.

For use with rsnapshot, uncomment and change the exclude_file line in
/etc/rsnapshot.conf (or /opt/rsnapshot.conf used by Poikilos machines or
scripts) as follows:

exclude_file	/opt/rsnapshot/exclude_from_backup-absolute-generated.txt

Other features:
- generates a 1.list_of_zips.txt in each directory where "*.zip" is
  excluded, as a record of which zips were excluded from the backup
  (The full path is calculated using the location of the
  exclude_from_backup.txt file).

For further rsnapshot notes and a setup specific to Poikilos machines
and scripts such as linux-preinstall, see
linux-preinstall/doc/rsnapshot.md.
'''
import sys
import os
import platform


verbosity = 0
for argI in range(1, len(sys.argv)):
    arg = sys.argv[argI]
    if arg.startswith("--"):
        if arg == "--verbosity":
            verbosity = 1
        elif arg == "--debug":
            verbosity = 2


def get_verbosity():
    return verbosity


def set_verbosity(level):
    global verbosity
    verbosity_levels = [True, False, 0, 1, 2]
    if level not in verbosity_levels:
        raise ValueError("verbosity must be 0-2 but was {}".format(verbosity))
    verbosity = level


def echo0(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)


def echo1(*args, **kwargs):
    if not verbosity:
        return
    print(*args, file=sys.stderr, **kwargs)


def echo2(*args, **kwargs):
    if verbosity < 2:
        return
    print(*args, file=sys.stderr, **kwargs)


def echo3(*args, **kwargs):
    if verbosity < 3:
        return
    print(*args, file=sys.stderr, **kwargs)


HOME = os.environ.get('HOME')
if platform.system() == "Windows":
    HOME = os.environ['USERPROFILE']

HOMES, USER_DIR_NAME = os.path.split(HOME)


'''
from moreplatform import (
    USER_DIR_NAME,
    echo0,
    echo1,
    echo2,
    profile
)
'''

src_txt_name = "exclude_from_backup.txt"
src_txt = os.path.join(HOME, src_txt_name)
dst_confs = os.path.join("/opt", "rsnapshot")
dst_txt = os.path.join(dst_confs, "exclude_from_backup-absolute-generated.txt")

enable_chown = False

if not os.path.isfile(src_txt):
    enable_chown = True
    try_home = os.path.join("/home", "owner")
    try_txt = os.path.join(try_home, src_txt_name)
    if os.path.isfile(try_txt):
        src_txt = try_txt
        HOME = try_home
        HOMES, USER_DIR_NAME = os.path.split(HOME)
        echo0("* detected {}".format(try_txt))
echo0('HOMES="{}"'.format(HOMES))
echo0('USER_DIR_NAME="{}"'.format(USER_DIR_NAME))
echo0('HOME="{}"'.format(HOME))
echo0('src_txt="{}"'.format(src_txt))

def main():

    if not os.path.isdir(dst_confs):
        try:
            os.makedirs(dst_confs)
        except PermissionError as ex:
            echo0(str(ex))
            echo0('You must create "{}" and give "{}" the write permission.'
                  ''.format(dst_confs, os.getlogin()))
            return 1
    with open(src_txt, 'r') as ins:
        with open(dst_txt, 'w') as outs:
            for rawL in ins:
                line = rawL.strip()
                if len(line) < 1:
                    continue
                path = line
                if path.endswith("*.zip"):
                    # Leave a trail of breadcrumbs for downloads:
                    parent = os.path.join(HOME, os.path.split(path)[0])
                    list_name = "1.list_of_zips.txt"
                    list_path = os.path.join(parent, list_name)
                    if not os.path.isfile(list_path):
                        matches = []
                        for sub in os.listdir(parent):
                            # subPath = os.path.join(parent, sub)
                            if sub.lower().endswith(".zip"):
                                matches.append(sub)
                        if len(subs) > 0:
                            this_gid = None
                            this_uid = None
                            with open(list_path, 'w') as f:
                                f.write("# generated by generate_exclude.py\n")
                                for sub in subs:
                                    subPath = os.path.join(parent, sub)
                                    if this_uid is None:
                                        this_uid = os.stat(subPath).st_uid
                                    if this_gid is None:
                                        this_gid = os.stat(subPath).st_gid
                                    f.write(sub+"\n")
                            echo0('* generated "{}"'.format(list_path))
                            if enable_chown:
                                echo0("  - changing to uid={} gid={}"
                                     "".format(this_uid, this_gid))
                                if (this_uid is None) or (this_gid is None):
                                    echo0("    FAILED: no uid or gid found for the files")
                                else:
                                    os.chown(list_path, this_uid, this_gid)
                        else:
                            echo0('* skipped creating 0-length "{}"'.format(list_path))
                    else:
                        echo0('* skipped existing "{}"'.format(list_path))
                if not path.startswith(HOMES):
                    path = os.path.join(HOMES, "*", path)
                outs.write(path+"\n")
        echo0('* wrote "{}"'.format(dst_txt))
    return 0


if __name__ == "__main__":
    sys.exit(main())
