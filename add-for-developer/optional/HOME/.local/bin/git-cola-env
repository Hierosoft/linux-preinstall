#!/bin/bash

# Function to show messages
show_message() {
    local msg=$1
    local file=$2

    # Use xmessage if installed, otherwise notify-send
    if [ -n "$file" ] && [ -f "$file" ]; then
        if command -v xmessage &> /dev/null; then
            xmessage -file "$file"
        elif command -v notify-send &> /dev/null; then
            notify-send -u critical "Git Cola Error" "$(cat "$file")"
        else
            echo "$(cat "$file")"
        fi
    else
        if command -v xmessage &> /dev/null; then
            xmessage "$msg"
        elif command -v notify-send &> /dev/null; then
            notify-send -u critical "Git Cola Error" "$msg"
        else
            echo "$msg"
        fi
    fi
}

DISTRO_GIT_COLA="`command -v git-cola`"
if [ -f "$DISTRO_GIT_COLA" ]; then
    me="`realpath $0`"
    DISTRO_GIT_COLA="`realpath $DISTRO_GIT_COLA`"

    if [ "$DISTRO_GIT_COLA" != "$me" ]; then
        show_message "This script only works if there is no packaged git-cola command, but $DISTRO_GIT_COLA exists and is not me ($0 -> $me)!"
        exit 1
    fi
fi

git_cola_venv_path="$HOME/.virtualenvs/git-cola"
cola_env_python="$git_cola_venv_path/bin/python"
output_file="/tmp/git-cola-runner.out"

# Set dquo to double quotes if there are spaces in git_cola_venv_path, otherwise set it to an empty string
if [[ "$git_cola_venv_path" =~ \  ]]; then
    dquo='"'
else
    dquo=""
fi

# Delete output file if it exists
if [ -f "$output_file" ]; then
    rm "$output_file" || {
        show_message "Failed to delete $output_file"
        exit 1
    }
fi

# Check if the virtual environment exists
if [ ! -d "$git_cola_venv_path" ]; then
    # Create the virtual environment if it doesn't exist
    python3 -m venv "$git_cola_venv_path"
    code=$?
    if [ $code -ne 0 ]; then
        show_message "Error: 'python3 -m venv ${dquo}${git_cola_venv_path}${dquo}' failed with return code $code."
        exit $code
    elif [ ! -d "$git_cola_venv_path" ]; then
        show_message "Error: 'python3 -m venv ${dquo}${git_cola_venv_path}${dquo}' returned ok (code 0) but didn't generate ${dquo}${git_cola_venv_path}${dquo}"
        exit -1
    fi
fi

"$cola_env_python" -m pip install PyQt5
"$cola_env_python" -m pip install --upgrade git-cola
code=$?
if [ $code -ne 0 ]; then
    show_message "Error: '${dquo}${cola_env_python}${dquo} -m pip install --upgrade git-cola' failed."
    show_message "You may have to run:\n${dquo}${cola_env_python}${dquo} -m ensurepip"
    exit $code
fi

# Run the Python script and capture stderr and stdout
if [ "$1" = "sequenceeditor" ]; then
"$cola_env_python" -c '
import sys
import re
from cola.sequenceeditor import main

if __name__ == "__main__":
    sys.argv[0] = re.sub(r"(-script\.pyw|\.exe)?$", "", sys.argv[0])
    sys.exit(main())
' > "$output_file" 2>&1
elif [ "$1" = "dag" ]; then
"$cola_env_python" -c '
import sys
import re
from cola.sequenceeditor import main

if __name__ == "__main__":
    sys.argv[0] = re.sub(r"(-script\.pyw|\.exe)?$", "", sys.argv[0])
    sys.exit(main())
' > "$output_file" 2>&1
else
    if [ "$1" != "cola" ]; then
        >&2 "[$0] Warning: unknown/missing arg: '$1'. Expected cola, dag, or sequenceeditor. Defaulting to cola."
    fi
"$cola_env_python" -c '
import sys
import re
from cola.main import main

if __name__ == "__main__":
    sys.argv[0] = re.sub(r"(-script\.pyw|\.exe)?$", "", sys.argv[0])
    sys.exit(main())
' > "$output_file" 2>&1
fi
code=$?

# Check if Python command failed
if [ $code -ne 0 ]; then
    if [ $code -ne 66 ]; then
        echo "The process returned error code $code." >> "$output_file"
        echo "Even after installing packages you still must do:" >> "$output_file"
        # echo "rm -rf \"$git_cola_venv_path\"" >> "$output_file"
        echo "\"$cola_env_python\" -m pip install PyQt5" >> "$output_file"
        show_message "" "$output_file"
        rm "$output_file"
        exit $code
    # else ignore 66 (EXIT_NOINPUT = 66 in cola/core.py always occurs if no project open)
    fi
fi

# Cleanup the output file after successful execution
rm "$output_file"
